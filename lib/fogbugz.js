// Generated by CoffeeScript 1.6.3
(function() {
  var CallApi, ListProjects, LogOff, LogOn, SetURL, fogbugzURL, https, xml2js;

  https = require('https');

  xml2js = require('xml2js');

  fogbugzURL = null;

  SetURL = function(url) {
    return fogbugzURL = url;
  };

  LogOn = function(username, password, callback) {
    return CallApi('cmd=logon&email=' + username + '&password=' + password, null, function(err, result) {
      if (err) {
        return callback(new Error('Error logging in: ' + err.message));
      } else {
        return callback(null, result['token'][0]);
      }
    });
  };

  LogOff = function(token, callback) {
    return CallApi('cmd=logoff', token, function(err, result) {
      if (err) {
        return callback(new Error('Error logging off: ' + err.message));
      } else {
        return callback(null);
      }
    });
  };

  ListProjects = function(options, token, callback) {
    var command;
    command = 'cmd=listProjects';
    if (options['fWrite']) {
      command += "&fWrite=1";
    }
    if (options['ixProject']) {
      command += "&ixProject=" + options.ixProject;
    }
    if (options['fIncludeDeleted']) {
      command += "&fIncludeDeleted=1";
    }
    return CallApi(command, token, function(err, result) {
      if (err) {
        return callback(new Error('Error listing projects: ' + err.message));
      } else {
        return callback(null, result['projects'][0]['project']);
      }
    });
  };

  CallApi = function(commandText, token, callback) {
    var GetToken, xml;
    if (token == null) {
      token = '';
    }
    if (!fogbugzURL) {
      callback(new Error('You have not specified a URL to call the API with'));
      return;
    }
    xml = '';
    GetToken = function(nullableToken) {
      if (nullableToken) {
        return "&token=" + nullableToken;
      } else {
        return '';
      }
    };
    return https.get(fogbugzURL + commandText + GetToken(token), function(response) {
      response.on('data', function(chunk) {
        return xml += chunk;
      });
      response.on('error', function(error) {
        return callback(new Error(error.message));
      });
      return response.on('end', function() {
        return xml2js.parseString(xml, function(err, result) {
          if (result['response']['error']) {
            return callback(new Error(JSON.stringify(result['response']['error'])));
          } else {
            return callback(null, result['response']);
          }
        });
      });
    });
  };

  exports.LogOn = LogOn;

  exports.LogOff = LogOff;

  exports.SetURL = SetURL;

  exports.ListProjects = ListProjects;

}).call(this);
